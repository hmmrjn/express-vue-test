'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// vue: {
//     head: {
//         title: 'Page Title',
//         meta: [
//             { property:'og:title', content: 'Page Title'},
//             { name:'twitter:title', content: 'Page Title'},
//         ]
//     }
// }
var HeadUtil = function () {
    function HeadUtil(vueObject, styleString) {
        _classCallCheck(this, HeadUtil);

        this.setupStyleString(styleString);
        this.setupMetaTags(vueObject);
        this.setupTitle(vueObject);
        this.setupStructuredData(vueObject);
    }

    _createClass(HeadUtil, [{
        key: 'setupMetaTags',
        value: function setupMetaTags(vueObject) {
            if (this.metaTags === undefined) {
                this.metaTags = '';
            }
            if (vueObject.head && vueObject.head.meta) {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = vueObject.head.meta[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var metaItem = _step.value;

                        if (metaItem.value) {
                            this.metaTags += '<meta name="' + metaItem.name + '" value="' + metaItem.value + '"/>\n';
                        } else if (metaItem.name) {
                            this.metaTags += '<meta name="' + metaItem.name + '" content="' + metaItem.content + '"/>\n';
                        } else if (metaItem.property) {
                            this.metaTags += '<meta property="' + metaItem.property + '" content="' + metaItem.content + '"/>\n';
                        } else if (metaItem.script) {
                            var charset = metaItem.charset || 'utf-8';
                            var async = metaItem.async ? ' async=true' : '';
                            this.metaTags += '<script src="' + metaItem.script + '" charset="' + charset + '"' + async + '></script>\n';
                        } else if (metaItem.charset) {
                            this.metaTags += '<meta charset="' + metaItem.charset + '"/>\n';
                        } else if (metaItem.style) {
                            var type = metaItem.type || 'text/css';
                            var rel = 'stylesheet';
                            this.metaTags += '<link rel="' + rel + '" type="' + type + '" href="' + metaItem.style + '">\n';
                        } else if (metaItem.rel) {
                            // <link rel="icon" type="image/png" href="/assets/favicons/favicon-32x32.png" sizes="32x32"/>
                            var _rel = metaItem.rel ? 'rel="' + metaItem.rel + '" ' : '';
                            var _type = metaItem.type ? 'type="' + metaItem.type + '" ' : '';
                            var href = metaItem.href ? 'href="' + metaItem.href + '" ' : '';
                            var sizes = metaItem.sizes ? 'sizes="' + metaItem.sizes + '" ' : '';
                            var itemprop = metaItem.itemprop ? 'itemprop="' + metaItem.itemprop + '" ' : '';
                            var hreflang = metaItem.hreflang ? 'hreflang="' + metaItem.hreflang + '" ' : '';
                            var crossorigin = metaItem.crossorigin ? 'crossorigin="' + metaItem.crossorigin + '"' : '';
                            this.metaTags += '<link ' + _rel + _type + href + sizes + itemprop + hreflang + crossorigin + '>\n';
                        } else if (metaItem.srcContents) {
                            this.metaTags += metaItem.srcContents + '\n';
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        }
    }, {
        key: 'setupTitle',
        value: function setupTitle(vueObject) {
            if (vueObject && vueObject.head && vueObject.head.title) {
                this.title = '<title>' + vueObject.head.title + '</title>\n';
            } else {
                this.title = '';
            }
        }
    }, {
        key: 'setupStructuredData',
        value: function setupStructuredData(vueObject) {
            if (vueObject && vueObject.head && vueObject.head.structuredData) {
                this.structuredData = '<script type="application/ld+json">\n' + JSON.stringify(vueObject.head.structuredData) + '\n</script>\n';
            } else {
                this.structuredData = '';
            }
        }
    }, {
        key: 'setupStyleString',
        value: function setupStyleString(styleString) {
            if (styleString) {
                this.style = '<style>' + styleString + '</style>';
            } else {
                this.style = '';
            }
        }
    }, {
        key: 'toString',
        value: function toString() {
            return '<head>\n' + this.title + this.metaTags + this.structuredData + this.style + '</head>';
        }
    }]);

    return HeadUtil;
}();

module.exports = HeadUtil;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,