'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Module = require('module');
var path = require('path');
var slash = require('slash');
var Utils = require('./index');
var Renderer = require('../renderer');
var Models = require('../models');

var Options = function Options(optsObj) {
    _classCallCheck(this, Options);

    this.vueFileRegex = /([\w/.\-@_\d]*\.vue)/igm;
    this.requireRegex = /(require\(['"])([\w:/.\-@_\d]*\.vue)(['"]\))/igm;
    this.appendPaths = optsObj.appendPaths || [];
    this.prependPaths = optsObj.prependPaths || [];
    this.rootPath = optsObj.rootPath || '';
    this.defaults = optsObj.defaults;
};

function getVueObject(componentPath, rootPath, vueComponentFileMatch, Cache, Options) {
    var GlobalOptions = new Models.Defaults({
        rootPath: rootPath,
        component: componentPath,
        style: Options.defaults.style || ''
    });
    return new Promise(function (resolve, reject) {
        Utils.setupComponent(componentPath, GlobalOptions, Cache).then(function (component) {
            var rendered = Renderer.renderHtmlUtil(component);
            if (!rendered) {
                reject(new Error('Renderer Error'));
            } else {
                if (Options.defaults.style) {
                    Options.defaults.style += rendered.layout.style;
                } else {
                    Options.defaults.style = rendered.layout.style;
                }

                resolve({
                    rendered: rendered,
                    match: vueComponentFileMatch
                });
            }
        }).catch(function (error) {
            reject(error);
        });
    });
}

function replaceRelativePaths(code, rootPath) {
    var parentMatchesSingle = code.match(/(require\('\.\.\/)/gm);
    var currentMatchesSingle = code.match(/(require\('\.\/)/gm);
    var parentMatchesDouble = code.match(/(require\("\.\.\/)/gm);
    var currentMatchesDouble = code.match(/(require\("\.\/)/gm);
    if (parentMatchesSingle) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = parentMatchesSingle[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var _match = _step.value;

                code = code.replace(_match, slash('require(\'' + rootPath + '/../'));
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    }
    if (parentMatchesDouble) {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
            for (var _iterator2 = parentMatchesDouble[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var _match2 = _step2.value;

                code = code.replace(_match2, slash('require("' + rootPath + '/../'));
            }
        } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                    _iterator2.return();
                }
            } finally {
                if (_didIteratorError2) {
                    throw _iteratorError2;
                }
            }
        }
    }
    if (currentMatchesSingle) {
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
            for (var _iterator3 = currentMatchesSingle[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                var _match3 = _step3.value;

                code = code.replace(_match3, slash('require(\'' + rootPath + '/./'));
            }
        } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion3 && _iterator3.return) {
                    _iterator3.return();
                }
            } finally {
                if (_didIteratorError3) {
                    throw _iteratorError3;
                }
            }
        }
    }
    if (currentMatchesDouble) {
        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
            for (var _iterator4 = currentMatchesDouble[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                var _match4 = _step4.value;

                code = code.replace(_match4, slash('require("' + rootPath + '/./'));
            }
        } catch (err) {
            _didIteratorError4 = true;
            _iteratorError4 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion4 && _iterator4.return) {
                    _iterator4.return();
                }
            } finally {
                if (_didIteratorError4) {
                    throw _iteratorError4;
                }
            }
        }
    }
    return code;
}

function requireFromString(code) {
    var filename = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    var optsObj = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var Cache = arguments[3];

    return new Promise(function (resolve, reject) {
        var options = new Options(optsObj);
        var promiseArray = [];

        if (typeof code !== 'string') {
            throw new Error('code must be a string, not ' + (typeof code === 'undefined' ? 'undefined' : _typeof(code)));
        }
        code = replaceRelativePaths(code, options.rootPath);
        var paths = Module._nodeModulePaths(path.dirname(filename));
        var m = new Module(filename, options.rootPath);
        m.filename = filename;
        m.paths = [].concat(options.prependPaths).concat(paths).concat(options.appendPaths);

        //find matches for the require paths
        var vueComponentFileMatches = code.match(options.requireRegex);
        if (vueComponentFileMatches && vueComponentFileMatches.length > 0) {
            //iterate through the matches
            for (var index = 0; index < vueComponentFileMatches.length; index++) {
                var vueComponentFileMatch = vueComponentFileMatches[index];
                //get the file out of the require string
                //this is because its easier to do string replace later
                var vueComponentFile = vueComponentFileMatch.match(options.vueFileRegex);
                if (vueComponentFile && vueComponentFile.length > 0) {
                    promiseArray.push(getVueObject(vueComponentFile[0], options.rootPath, vueComponentFileMatch, Cache, options));
                }
            }
            Promise.all(promiseArray).then(function (renderedItemArray) {
                var styles = '';
                var _iteratorNormalCompletion5 = true;
                var _didIteratorError5 = false;
                var _iteratorError5 = undefined;

                try {
                    for (var _iterator5 = renderedItemArray[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                        var renderedItem = _step5.value;

                        var rawString = renderedItem.rendered.scriptStringRaw;
                        code = code.replace(renderedItem.match, rawString);
                        if (renderedItem.rendered.layout && renderedItem.rendered.layout.style) {
                            styles += renderedItem.rendered.layout.style;
                        }
                    }
                    //check if its the last element and then render
                } catch (err) {
                    _didIteratorError5 = true;
                    _iteratorError5 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion5 && _iterator5.return) {
                            _iterator5.return();
                        }
                    } finally {
                        if (_didIteratorError5) {
                            throw _iteratorError5;
                        }
                    }
                }

                var last_element = code.match(options.vueFileRegex);
                if (last_element === undefined || last_element === null) {
                    m._compile(code, filename);
                    m.exports.default.styles = styles;
                    resolve(m.exports.default);
                }
            }).catch(function (error) {
                reject(error);
            });
        } else {
            m._compile(code, filename);
            resolve(m.exports.default);
        }
    });
}

module.exports = requireFromString;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9yZXF1aXJlLmpzIl0sIm5hbWVzIjpbIk1vZHVsZSIsInJlcXVpcmUiLCJwYXRoIiwic2xhc2giLCJVdGlscyIsIlJlbmRlcmVyIiwiTW9kZWxzIiwiT3B0aW9ucyIsIm9wdHNPYmoiLCJ2dWVGaWxlUmVnZXgiLCJyZXF1aXJlUmVnZXgiLCJhcHBlbmRQYXRocyIsInByZXBlbmRQYXRocyIsInJvb3RQYXRoIiwiZGVmYXVsdHMiLCJnZXRWdWVPYmplY3QiLCJjb21wb25lbnRQYXRoIiwidnVlQ29tcG9uZW50RmlsZU1hdGNoIiwiQ2FjaGUiLCJHbG9iYWxPcHRpb25zIiwiRGVmYXVsdHMiLCJjb21wb25lbnQiLCJzdHlsZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0Iiwic2V0dXBDb21wb25lbnQiLCJ0aGVuIiwicmVuZGVyZWQiLCJyZW5kZXJIdG1sVXRpbCIsIkVycm9yIiwibGF5b3V0IiwibWF0Y2giLCJjYXRjaCIsImVycm9yIiwicmVwbGFjZVJlbGF0aXZlUGF0aHMiLCJjb2RlIiwicGFyZW50TWF0Y2hlc1NpbmdsZSIsImN1cnJlbnRNYXRjaGVzU2luZ2xlIiwicGFyZW50TWF0Y2hlc0RvdWJsZSIsImN1cnJlbnRNYXRjaGVzRG91YmxlIiwicmVwbGFjZSIsInJlcXVpcmVGcm9tU3RyaW5nIiwiZmlsZW5hbWUiLCJvcHRpb25zIiwicHJvbWlzZUFycmF5IiwicGF0aHMiLCJfbm9kZU1vZHVsZVBhdGhzIiwiZGlybmFtZSIsIm0iLCJjb25jYXQiLCJ2dWVDb21wb25lbnRGaWxlTWF0Y2hlcyIsImxlbmd0aCIsImluZGV4IiwidnVlQ29tcG9uZW50RmlsZSIsInB1c2giLCJhbGwiLCJzdHlsZXMiLCJyZW5kZXJlZEl0ZW1BcnJheSIsInJlbmRlcmVkSXRlbSIsInJhd1N0cmluZyIsInNjcmlwdFN0cmluZ1JhdyIsImxhc3RfZWxlbWVudCIsInVuZGVmaW5lZCIsIl9jb21waWxlIiwiZXhwb3J0cyIsImRlZmF1bHQi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QUFDSDtBQUNKLGFBakJMLEVBa0JLakMsS0FsQkwsQ0FrQlcsaUJBQVM7QUFDWlIsdUJBQU9TLEtBQVA7QUFDSCxhQXBCTDtBQXFCSCxTQWhDRCxNQWdDTztBQUNIZSxjQUFFZSxRQUFGLENBQVc1QixJQUFYLEVBQWlCTyxRQUFqQjtBQUNBbkIsb0JBQVF5QixFQUFFZ0IsT0FBRixDQUFVQyxPQUFsQjtBQUNIO0FBQ0osS0FuRE0sQ0FBUDtBQW9ESDs7QUFFREMsT0FBT0YsT0FBUCxHQUFpQnZCLGlCQUFqQiIsImZpbGUiOiJyZXF1aXJlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcbmNvbnN0IE1vZHVsZSA9IHJlcXVpcmUoJ21vZHVsZScpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IHNsYXNoID0gcmVxdWlyZSgnc2xhc2gnKTtcbmNvbnN0IFV0aWxzID0gcmVxdWlyZSgnLi9pbmRleCcpO1xuY29uc3QgUmVuZGVyZXIgPSByZXF1aXJlKCcuLi9yZW5kZXJlcicpO1xuY29uc3QgTW9kZWxzID0gcmVxdWlyZSgnLi4vbW9kZWxzJyk7XG5cbmNsYXNzIE9wdGlvbnMge1xuICAgIHZ1ZUZpbGVSZWdleDogUmVnRXhwO1xuICAgIHJlcXVpcmVSZWdleDogUmVnRXhwO1xuICAgIGFwcGVuZFBhdGhzOiBzdHJpbmdbXTtcbiAgICBwcmVwZW5kUGF0aHM6IHN0cmluZ1tdO1xuICAgIHJvb3RQYXRoOiBzdHJpbmc7XG4gICAgZGVmYXVsdHM6IE1vZGVscy5EZWZhdWx0cztcbiAgICBjb25zdHJ1Y3RvcihvcHRzT2JqOiBPYmplY3QpIHtcbiAgICAgICAgdGhpcy52dWVGaWxlUmVnZXggPSAvKFtcXHcvLlxcLUBfXFxkXSpcXC52dWUpL2lnbTtcbiAgICAgICAgdGhpcy5yZXF1aXJlUmVnZXggPSAvKHJlcXVpcmVcXChbJ1wiXSkoW1xcdzovLlxcLUBfXFxkXSpcXC52dWUpKFsnXCJdXFwpKS9pZ207XG4gICAgICAgIHRoaXMuYXBwZW5kUGF0aHMgPSBvcHRzT2JqLmFwcGVuZFBhdGhzIHx8IFtdO1xuICAgICAgICB0aGlzLnByZXBlbmRQYXRocyA9IG9wdHNPYmoucHJlcGVuZFBhdGhzIHx8IFtdO1xuICAgICAgICB0aGlzLnJvb3RQYXRoID0gb3B0c09iai5yb290UGF0aCB8fCAnJztcbiAgICAgICAgdGhpcy5kZWZhdWx0cyA9IG9wdHNPYmouZGVmYXVsdHM7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXRWdWVPYmplY3QoY29tcG9uZW50UGF0aDogc3RyaW5nLCByb290UGF0aDogc3RyaW5nLCB2dWVDb21wb25lbnRGaWxlTWF0Y2g6IHN0cmluZywgQ2FjaGU6IE9iamVjdCwgT3B0aW9uczogT3B0aW9ucyk6IFByb21pc2UgPCB7cmVuZGVyZWQ6T2JqZWN0LCBtYXRjaDogc3RyaW5nfSA+IHtcbiAgICBjb25zdCBHbG9iYWxPcHRpb25zID0gbmV3IE1vZGVscy5EZWZhdWx0cyh7XG4gICAgICAgIHJvb3RQYXRoOiByb290UGF0aCxcbiAgICAgICAgY29tcG9uZW50OiBjb21wb25lbnRQYXRoLFxuICAgICAgICBzdHlsZTogT3B0aW9ucy5kZWZhdWx0cy5zdHlsZSB8fCAnJ1xuICAgIH0pO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIFV0aWxzLnNldHVwQ29tcG9uZW50KGNvbXBvbmVudFBhdGgsIEdsb2JhbE9wdGlvbnMsIENhY2hlKVxuICAgICAgICAgICAgLnRoZW4oY29tcG9uZW50ID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZW5kZXJlZCA9IFJlbmRlcmVyLnJlbmRlckh0bWxVdGlsKGNvbXBvbmVudCk7XG4gICAgICAgICAgICAgICAgaWYgKCFyZW5kZXJlZCkge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdSZW5kZXJlciBFcnJvcicpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoT3B0aW9ucy5kZWZhdWx0cy5zdHlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgT3B0aW9ucy5kZWZhdWx0cy5zdHlsZSArPSByZW5kZXJlZC5sYXlvdXQuc3R5bGU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBPcHRpb25zLmRlZmF1bHRzLnN0eWxlID0gcmVuZGVyZWQubGF5b3V0LnN0eWxlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJlZDogcmVuZGVyZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaDogdnVlQ29tcG9uZW50RmlsZU1hdGNoXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gcmVwbGFjZVJlbGF0aXZlUGF0aHMoY29kZTogc3RyaW5nLCByb290UGF0aDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBwYXJlbnRNYXRjaGVzU2luZ2xlID0gY29kZS5tYXRjaCgvKHJlcXVpcmVcXCgnXFwuXFwuXFwvKS9nbSk7XG4gICAgY29uc3QgY3VycmVudE1hdGNoZXNTaW5nbGUgPSBjb2RlLm1hdGNoKC8ocmVxdWlyZVxcKCdcXC5cXC8pL2dtKTtcbiAgICBjb25zdCBwYXJlbnRNYXRjaGVzRG91YmxlID0gY29kZS5tYXRjaCgvKHJlcXVpcmVcXChcIlxcLlxcLlxcLykvZ20pO1xuICAgIGNvbnN0IGN1cnJlbnRNYXRjaGVzRG91YmxlID0gY29kZS5tYXRjaCgvKHJlcXVpcmVcXChcIlxcLlxcLykvZ20pO1xuICAgIGlmIChwYXJlbnRNYXRjaGVzU2luZ2xlKSB7XG4gICAgICAgIGZvciAoY29uc3QgbWF0Y2ggb2YgcGFyZW50TWF0Y2hlc1NpbmdsZSkge1xuICAgICAgICAgICAgY29kZSA9IGNvZGUucmVwbGFjZShtYXRjaCwgc2xhc2goYHJlcXVpcmUoJyR7cm9vdFBhdGh9Ly4uL2ApKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAocGFyZW50TWF0Y2hlc0RvdWJsZSkge1xuICAgICAgICBmb3IgKGNvbnN0IG1hdGNoIG9mIHBhcmVudE1hdGNoZXNEb3VibGUpIHtcbiAgICAgICAgICAgIGNvZGUgPSBjb2RlLnJlcGxhY2UobWF0Y2gsIHNsYXNoKGByZXF1aXJlKFwiJHtyb290UGF0aH0vLi4vYCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChjdXJyZW50TWF0Y2hlc1NpbmdsZSkge1xuICAgICAgICBmb3IgKGNvbnN0IG1hdGNoIG9mIGN1cnJlbnRNYXRjaGVzU2luZ2xlKSB7XG4gICAgICAgICAgICBjb2RlID0gY29kZS5yZXBsYWNlKG1hdGNoLCBzbGFzaChgcmVxdWlyZSgnJHtyb290UGF0aH0vLi9gKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGN1cnJlbnRNYXRjaGVzRG91YmxlKSB7XG4gICAgICAgIGZvciAoY29uc3QgbWF0Y2ggb2YgY3VycmVudE1hdGNoZXNEb3VibGUpIHtcbiAgICAgICAgICAgIGNvZGUgPSBjb2RlLnJlcGxhY2UobWF0Y2gsIHNsYXNoKGByZXF1aXJlKFwiJHtyb290UGF0aH0vLi9gKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvZGU7XG59XG5cblxuZnVuY3Rpb24gcmVxdWlyZUZyb21TdHJpbmcoY29kZTogc3RyaW5nLCBmaWxlbmFtZTogc3RyaW5nID0gJycsIG9wdHNPYmo6IE9iamVjdCA9IHt9LCBDYWNoZTogT2JqZWN0KTogUHJvbWlzZSA8IE9iamVjdCA+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gbmV3IE9wdGlvbnMob3B0c09iaik7XG4gICAgICAgIGxldCBwcm9taXNlQXJyYXkgPSBbXTtcblxuICAgICAgICBpZiAodHlwZW9mIGNvZGUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvZGUgbXVzdCBiZSBhIHN0cmluZywgbm90ICcgKyB0eXBlb2YgY29kZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29kZSA9IHJlcGxhY2VSZWxhdGl2ZVBhdGhzKGNvZGUsIG9wdGlvbnMucm9vdFBhdGgpO1xuICAgICAgICBsZXQgcGF0aHMgPSBNb2R1bGUuX25vZGVNb2R1bGVQYXRocyhwYXRoLmRpcm5hbWUoZmlsZW5hbWUpKTtcbiAgICAgICAgdmFyIG0gPSBuZXcgTW9kdWxlKGZpbGVuYW1lLCBvcHRpb25zLnJvb3RQYXRoKTtcbiAgICAgICAgbS5maWxlbmFtZSA9IGZpbGVuYW1lO1xuICAgICAgICBtLnBhdGhzID0gW10uY29uY2F0KG9wdGlvbnMucHJlcGVuZFBhdGhzKS5jb25jYXQocGF0aHMpLmNvbmNhdChvcHRpb25zLmFwcGVuZFBhdGhzKTtcblxuICAgICAgICAvL2ZpbmQgbWF0Y2hlcyBmb3IgdGhlIHJlcXVpcmUgcGF0aHNcbiAgICAgICAgbGV0IHZ1ZUNvbXBvbmVudEZpbGVNYXRjaGVzID0gY29kZS5tYXRjaChvcHRpb25zLnJlcXVpcmVSZWdleCk7XG4gICAgICAgIGlmICh2dWVDb21wb25lbnRGaWxlTWF0Y2hlcyAmJiB2dWVDb21wb25lbnRGaWxlTWF0Y2hlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAvL2l0ZXJhdGUgdGhyb3VnaCB0aGUgbWF0Y2hlc1xuICAgICAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHZ1ZUNvbXBvbmVudEZpbGVNYXRjaGVzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgICAgIHZhciB2dWVDb21wb25lbnRGaWxlTWF0Y2ggPSB2dWVDb21wb25lbnRGaWxlTWF0Y2hlc1tpbmRleF07XG4gICAgICAgICAgICAgICAgLy9nZXQgdGhlIGZpbGUgb3V0IG9mIHRoZSByZXF1aXJlIHN0cmluZ1xuICAgICAgICAgICAgICAgIC8vdGhpcyBpcyBiZWNhdXNlIGl0cyBlYXNpZXIgdG8gZG8gc3RyaW5nIHJlcGxhY2UgbGF0ZXJcbiAgICAgICAgICAgICAgICBjb25zdCB2dWVDb21wb25lbnRGaWxlID0gdnVlQ29tcG9uZW50RmlsZU1hdGNoLm1hdGNoKG9wdGlvbnMudnVlRmlsZVJlZ2V4KTtcbiAgICAgICAgICAgICAgICBpZiAodnVlQ29tcG9uZW50RmlsZSAmJiB2dWVDb21wb25lbnRGaWxlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZUFycmF5LnB1c2goZ2V0VnVlT2JqZWN0KHZ1ZUNvbXBvbmVudEZpbGVbMF0sIG9wdGlvbnMucm9vdFBhdGgsIHZ1ZUNvbXBvbmVudEZpbGVNYXRjaCwgQ2FjaGUsIG9wdGlvbnMpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBQcm9taXNlLmFsbChwcm9taXNlQXJyYXkpXG4gICAgICAgICAgICAgICAgLnRoZW4ocmVuZGVyZWRJdGVtQXJyYXkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgc3R5bGVzID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHJlbmRlcmVkSXRlbSBvZiByZW5kZXJlZEl0ZW1BcnJheSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmF3U3RyaW5nID0gcmVuZGVyZWRJdGVtLnJlbmRlcmVkLnNjcmlwdFN0cmluZ1JhdztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGUgPSBjb2RlLnJlcGxhY2UocmVuZGVyZWRJdGVtLm1hdGNoLCByYXdTdHJpbmcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlbmRlcmVkSXRlbS5yZW5kZXJlZC5sYXlvdXQgJiYgcmVuZGVyZWRJdGVtLnJlbmRlcmVkLmxheW91dC5zdHlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlcyArPSByZW5kZXJlZEl0ZW0ucmVuZGVyZWQubGF5b3V0LnN0eWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vY2hlY2sgaWYgaXRzIHRoZSBsYXN0IGVsZW1lbnQgYW5kIHRoZW4gcmVuZGVyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhc3RfZWxlbWVudCA9IGNvZGUubWF0Y2gob3B0aW9ucy52dWVGaWxlUmVnZXgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobGFzdF9lbGVtZW50ID09PSB1bmRlZmluZWQgfHwgbGFzdF9lbGVtZW50ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtLl9jb21waWxlKGNvZGUsIGZpbGVuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0uZXhwb3J0cy5kZWZhdWx0LnN0eWxlcyA9IHN0eWxlcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUobS5leHBvcnRzLmRlZmF1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbS5fY29tcGlsZShjb2RlLCBmaWxlbmFtZSk7XG4gICAgICAgICAgICByZXNvbHZlKG0uZXhwb3J0cy5kZWZhdWx0KTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmVGcm9tU3RyaW5nO1xuIl19