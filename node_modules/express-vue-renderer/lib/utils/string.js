'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var xss = require('xss');

var PropClass = function PropClass(prop) {
    _classCallCheck(this, PropClass);

    prop.required ? this.required = prop.required : null;
    prop.default ? this.default = prop.default : null;
};

function isLastElement(script, currentElement) {
    var elementArray = Object.keys(script);
    var lastElement = elementArray[elementArray.length - 1];

    if (currentElement === lastElement) {
        return '';
    } else {
        return ',';
    }
}

function routesToString(routes) {
    var routeString = '';
    var lastRoute = routes[routes.length - 1];
    routes.forEach(function (route) {
        if (route !== lastRoute) {
            routeString += scriptToString(route) + ',';
        } else {
            routeString += scriptToString(route);
        }
    });
    return '[' + routeString + ']';
}

function routeComponentsToString(script) {
    var componentString = '';
    for (var member in script) {
        componentString += member + ': __' + script[member] + isLastElement(script, member);
    }
    return '{' + componentString + '}';
}

function mixinsToString(mixins) {
    var mixinString = '';
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = mixins[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var mixin = _step.value;

            mixinString += scriptToString(mixin) + ',';
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    return mixinString;
}

function propsToString(props) {
    var propString = '';
    if (props[Object.keys(props)[0]].type === null) {
        var propsArray = Object.keys(props);
        propString = xss(JSON.stringify(propsArray));
    } else {
        var tempProp = {};
        for (var prop in props) {
            if (props.hasOwnProperty(prop)) {
                var element = new PropClass(props[prop]);
                tempProp[prop] = element;
            }
        }
        propString = scriptToString(tempProp);
    }
    return propString;
}

function scriptToString(script) {
    var scriptString = '';
    for (var member in script) {
        switch (_typeof(script[member])) {
            case 'function':
                if (member === 'data') {
                    var dataObj = xss(JSON.stringify(script[member]()));
                    scriptString += member + ': function(){return ' + dataObj + '},';
                } else {
                    scriptString += member + ': ' + String(script[member]) + isLastElement(script, member);
                }
                break;
            case 'object':
                if (member === 'data') {
                    scriptString += member + ': ' + xss(JSON.stringify(script[member])) + isLastElement(script, member);
                } else if (member === 'routes' || member === 'children') {
                    scriptString += member + ': ' + routesToString(script[member]) + isLastElement(script, member);
                } else if (member === 'components' && script['path'] !== undefined) {
                    // Checks if 'components' is in a route object
                    scriptString += member + ': ' + routeComponentsToString(script[member]) + isLastElement(script, member);
                } else if (member === 'mixins') {
                    scriptString += member + ': [' + mixinsToString(script[member]) + '],';
                } else if (script[member].constructor === Array) {
                    scriptString += member + ': ' + xss(JSON.stringify(script[member])) + isLastElement(script, member);
                } else if (member === 'props') {
                    if (script[member][Object.keys(script[member])[0]].type === null) {
                        var propsArray = Object.keys(script[member]);
                        scriptString += member + ': ' + xss(JSON.stringify(propsArray)) + isLastElement(script, member);
                    } else {
                        // scriptString += member + ': ' + scriptToString(script[member]) + isLastElement(script, member);
                        var propsString = propsToString(script[member]);
                        scriptString += member + ': ' + propsString + ',';
                    }
                } else {
                    scriptString += member + ': ' + scriptToString(script[member]) + isLastElement(script, member);
                }
                break;
            default:
                if (member === 'component' && script['path'] !== undefined) {
                    // Checks if 'component' is in a route object
                    scriptString += member + ': __' + script[member] + isLastElement(script, member);
                } else {
                    scriptString += member + ': ' + JSON.stringify(script[member]) + isLastElement(script, member);
                }
                break;
        }
    }
    var finalScriptString = '{' + scriptString + '}';
    return finalScriptString;
}

module.exports.scriptToString = scriptToString;
module.exports.mixinsToString = mixinsToString;
module.exports.routesToString = routesToString;
module.exports.routeComponentsToString = routeComponentsToString;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,